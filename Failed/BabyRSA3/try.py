from functools import reduce

def solve(p_minus_1, q_minus_1):
	c = 5499541793182458916572235549176816842668241174266452504513113060755436878677967801073969318886578771261808846567771826513941339489235903308596884669082743082338194484742630141310604711117885643229642732544775605225440292634865971099525895746978617397424574658645139588374017720075991171820873126258830306451326541384750806605195470098194462985494
	d = 15664449102383123741256492823637853135125214807384742239549570131336662433268993001893338579081447660916548171028888182200587902832321164315176336792229529488626556438838274357507327295590873540152237706572328731885382033467068457038670389341764040515475556103158917133155868200492242619473451848383350924192696773958592530565397202086200003936447

	p = p_minus_1 + 1
	q = q_minus_1 + 1
	assert (p % 2 == 1) # odd
	assert (q % 2 == 1) # odd

	N = p * q
	assert (N % 2 == 1) # odd

	m = hex(pow(c, d, N))

	# print(m)
	# m = c**d % N
	hexa = m[2:]
	if len(hexa) % 2 == 1:
		hexa = '0' + hexa
	print(bytes.fromhex(hexa))


from itertools import combinations, permutations
#factors = [333600482773, 2767687179787, 3639128890921, 3680247726403, 1, 1, 1, 1]

for count in range(1,8):
	factors = [2 , 2 , 333600482773 , 2767687179787 , 3639128890921 , 3680247726403 , 520482155911030985522407130784933200276054511296446894461426771937620276021981188426029637173475853437086816089874898971137267100732468220304233016458505802994919418208846567823984005341882240704273708257060876529943709270175869608929786262709341504642645577475714568308755775992937928394748182821]
	y = [comb for comb in permutations(factors, count)] # up to 7

	for each in y:
		x = reduce(lambda x, y: x*y, each)

		phi = 25744472610420721576721354142700666534585707423276540379553111662924462766649397845238736588395849560582824664399879219093936415146333463826035714360316647265405615591383999147878527778914526369981160444050742606139799706884875928674153255909145624833489266194817757115584913491575124670523917871310421296173148930930573096639196103714702234087492
		p_minus_1 = x
		q_minus_1 = phi // p_minus_1
		assert (p_minus_1 * q_minus_1) == phi

		if ((p_minus_1 % 2 == 0)) and ((q_minus_1 % 2 == 0)):
			solve(p_minus_1, q_minus_1)
	# m = c^d mod n

